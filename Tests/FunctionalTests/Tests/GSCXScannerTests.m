//
// Copyright 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#import "GSCXScannerTestCase.h"

#import <XCTest/XCTest.h>

#import "GSCXScannerOverlayViewController.h"
#import "GSCXScannerResultDetailViewController.h"
#import "GSCXScannerResultTableViewController.h"
#import "GSCXScannerScreenshotViewController.h"
#import "GSCXTestAppDelegate.h"
#import "GSCXTestScannerViewController.h"
#import "GSCXTestUIAccessibilityElementViewController.h"
#import "third_party/objective_c/EarlGrey/EarlGrey/EarlGrey.h"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Offset from the origin at which to tap the third ring view. Tapping the origin fails because
 *  it taps on the edge of the third ring view, which isn't considered inside the ring's frame.
 */
static const CGPoint kGSCXTestOverlappingRingViewTapOffset = {10, 10};

@interface GSCXScannerTests : GSCXScannerTestCase

/**
 *  Selects the perform scan button then taps it to scan the app's view hierarchy.
 */
- (void)_tapPerformScanButton;
/**
 *  Selects the dismiss bar button item on the screenshot view then taps it to return to the main
 *  application.
 */
- (void)_dismissScreenshotView;
/**
 *  Selects the ring view at the given index by matching the accessibility identifier generated by
 *  + [GSCXScannerScreenshotViewController accessibilityIdentifierForRingViewAtIndex:].
 *
 *  @param index The index of the ring view to be matched.
 *  @return The result of selecting the given ring view.
 */
- (GREYElementInteraction *)_selectRingViewAtIndex:(NSInteger)index;
/**
 *  Selects the table view cell whose text label has the given text.
 *
 *  @param text The text that matching table view cells must contain.
 *  @return An EarlGrey interaction generated by matching table view cells containing the given
 *          text.
 */
- (GREYElementInteraction *)_selectTableViewCellWithText:(NSString *)text;
/**
 *  Selects a navigation bar button item with the given accessibility label and taps it.
 *
 *  @param accessibilityLabel The accessibility label of the bar button item.
 */
- (void)_tapBackButtonWithAccessibilityLabel:(NSString *)accessibilityLabel;
/**
 *  Asserts that there are exactly the given number of rings on screen.
 *
 *  @param count The exact number of rings that must exist to pass the test.
 */
- (void)_assertRingViewCount:(NSInteger)count;

@end

@implementation GSCXScannerTests

- (void)testScanWithNoIssuesShowsAlert {
  [self _tapPerformScanButton];
  [[EarlGrey selectElementWithMatcher:grey_text(kGSCXNoIssuesDismissButtonText)]
      performAction:grey_tap()];
}

- (void)testScanRootViewsWithAccessibilityIssuesPresentsScreenshot {
  [self openPage:[GSCXTestScannerViewController class]];
  [self _tapPerformScanButton];
  [[EarlGrey selectElementWithMatcher:grey_text(@"4 Issues")] assertWithMatcher:grey_notNil()];
  [self _dismissScreenshotView];
}

- (void)testScreenshotPresentsRingViews {
  [self openPage:[GSCXTestScannerViewController class]];
  [self _tapPerformScanButton];
  [self _assertRingViewCount:3];
  [self _dismissScreenshotView];
}

- (void)testTappingOnRingViewWithMultipleIssuesPresentsTableView {
  [self openPage:[GSCXTestScannerViewController class]];
  [self _tapPerformScanButton];
  [[self _selectRingViewAtIndex:0] performAction:grey_tap()];
  [[self _selectTableViewCellWithText:kGSCXTestTagCheckName1] assertWithMatcher:grey_notNil()];
  [[self _selectTableViewCellWithText:kGSCXTestTagCheckName2] assertWithMatcher:grey_nil()];
  [[self _selectTableViewCellWithText:kGSCXTestTagCheckName3] assertWithMatcher:grey_nil()];
  [[self _selectTableViewCellWithText:kGSCXTestTagCheckName4] assertWithMatcher:grey_notNil()];
  [self _tapBackButtonWithAccessibilityLabel:@"4 Issues"];
  [self _dismissScreenshotView];
}

- (void)testTappingOnRingViewWithSingleIssuePresentsTableView {
  [self openPage:[GSCXTestScannerViewController class]];
  [self _tapPerformScanButton];
  [[self _selectRingViewAtIndex:1] performAction:grey_tap()];
  [[self _selectTableViewCellWithText:kGSCXTestTagCheckName1] assertWithMatcher:grey_nil()];
  [[self _selectTableViewCellWithText:kGSCXTestTagCheckName2] assertWithMatcher:grey_notNil()];
  [[self _selectTableViewCellWithText:kGSCXTestTagCheckName3] assertWithMatcher:grey_nil()];
  [[self _selectTableViewCellWithText:kGSCXTestTagCheckName4] assertWithMatcher:grey_nil()];
  [self _tapBackButtonWithAccessibilityLabel:@"4 Issues"];
  [self _dismissScreenshotView];
}

- (void)testTappingOnOverlappingRingViewsEachWithSingleIssuePresentsTableView {
  [self openPage:[GSCXTestScannerViewController class]];
  [self _tapPerformScanButton];
  [[self _selectRingViewAtIndex:2]
      performAction:grey_tapAtPoint(kGSCXTestOverlappingRingViewTapOffset)];
  [[self _selectTableViewCellWithText:kGSCXTestTagCheckName1] assertWithMatcher:grey_nil()];
  [[self _selectTableViewCellWithText:kGSCXTestTagCheckName2] assertWithMatcher:grey_notNil()];
  [[self _selectTableViewCellWithText:kGSCXTestTagCheckName3] assertWithMatcher:grey_notNil()];
  [[self _selectTableViewCellWithText:kGSCXTestTagCheckName4] assertWithMatcher:grey_nil()];
  [self _tapBackButtonWithAccessibilityLabel:@"4 Issues"];
  [self _dismissScreenshotView];
}

- (void)testTappingOnTableViewCellOpensDetailView {
  [self openPage:[GSCXTestScannerViewController class]];
  [self _tapPerformScanButton];
  [[self _selectRingViewAtIndex:1] performAction:grey_tap()];
  [[self _selectTableViewCellWithText:kGSCXTestTagCheckName2] performAction:grey_tap()];
  [[EarlGrey
      selectElementWithMatcher:grey_accessibilityID(kGSCXDetailCheckNameAccessibilityIdentifier)]
      assertWithMatcher:grey_text(kGSCXTestTagCheckName2)];
  [self _tapBackButtonWithAccessibilityLabel:@"Back"];
  [self _tapBackButtonWithAccessibilityLabel:@"4 Issues"];
  [self _dismissScreenshotView];
}

- (void)testUIAccessibilityElementFailsCheck {
  [self openPage:[GSCXTestUIAccessibilityElementViewController class]];
  [self _tapPerformScanButton];
  [self _assertRingViewCount:2];
  [self _dismissScreenshotView];
}

#pragma mark - Private

- (void)_tapPerformScanButton {
  [[EarlGrey selectElementWithMatcher:grey_accessibilityID(kGSCXPerformScanAccessibilityIdentifier)]
      performAction:grey_tap()];
}

- (void)_dismissScreenshotView {
  [[EarlGrey selectElementWithMatcher:grey_text(kGSCXWindowOverlayDismissButtonText)]
      performAction:grey_tap()];
}

- (GREYElementInteraction *)_selectRingViewAtIndex:(NSInteger)index {
  NSString *ringViewAXId =
      [GSCXScannerScreenshotViewController accessibilityIdentifierForRingViewAtIndex:index];
  return [EarlGrey selectElementWithMatcher:grey_accessibilityID(ringViewAXId)];
}

- (GREYElementInteraction *)_selectTableViewCellWithText:(NSString *)text {
  id<GREYMatcher> matcher =
      grey_allOf(grey_kindOfClass([UITableViewCell class]), grey_descendant(grey_text(text)), nil);
  return [EarlGrey selectElementWithMatcher:matcher];
}

- (void)_tapBackButtonWithAccessibilityLabel:(NSString *)accessibilityLabel {
  id<GREYMatcher> matcher = grey_allOf(
      grey_ancestor(grey_keyWindow()), grey_ancestor(grey_kindOfClass([UINavigationBar class])),
      grey_ancestor(grey_accessibilityTrait(UIAccessibilityTraitButton)),
      grey_text(accessibilityLabel), nil);
  [[EarlGrey selectElementWithMatcher:matcher] performAction:grey_tap()];
}

- (void)_assertRingViewCount:(NSInteger)count {
  for (NSInteger i = 0; i < count - 1; i++) {
    [[self _selectRingViewAtIndex:i] assertWithMatcher:grey_notNil()];
  }
  [[self _selectRingViewAtIndex:count] assertWithMatcher:grey_nil()];
}

@end

NS_ASSUME_NONNULL_END
